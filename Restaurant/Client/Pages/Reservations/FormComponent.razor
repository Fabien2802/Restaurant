@inject HttpClient _client

<EditForm Model="@reservation" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Table: </label>
        <div>
            <InputSelect @bind-Value="reservation.TableID" class="form-control">
                <option value="">-- Select Table --</option>
                @if (Tables != null)
                {
                    foreach (var table in Tables)
                    {
                        <option value="@table.TableID">@table.TableID</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => reservation.TableID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date: </label>
        <div>
            <InputDate @bind-Value="reservation.ReservationDateChoice" class="form-control" />
            <ValidationMessage For="@(() => reservation.ReservationDateChoice)" />
        </div>
    </div>

    <div class="form-group">
        <label>Time: </label>
        <div>
            <InputText @bind-Value="reservation.ReservationTime" class="form-control" pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$" title="Please enter a valid time (HH:mm)" />
            <ValidationMessage For="@(() => reservation.ReservationTime)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
</EditForm>


@code {
    [Parameter] public Reservation? reservation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Table> Tables;

    protected async override Task OnInitializedAsync()
    {
        Tables = await _client.GetFromJsonAsync<List<Table>>($"{Endpoints.TablesEndpoint}");
    }
}
