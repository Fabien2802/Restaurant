@page "/sales/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Restaurant Sales</h3>

@if (Sales == null)
{
    <div class="alert alert-info">Loading Sales...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Sale Amount</th>
                <th>Sale OrderID(which order it comes from)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sale in Sales)
            {
                <tr>
                    <td>@sale.SaleTotalAmount</td>
                    <td>@sale.Orders.OrderID</td>
                    <td>
                        <a href="/tables/view/@sale.SaleID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/tables/view/@sale.SaleID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(sale.SaleID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Sale>? Sales;

    protected async override Task OnInitializedAsync()
    {
        Sales = await _client.GetFromJsonAsync<List<Sale>>($"{Endpoints.SalesEndpoint}");
    }

    async Task Delete(int saleId)
    {
        if (Sales != null)
        {
            var sale = Sales.First(q => q.SaleID == saleId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this row?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.SalesEndpoint}/{saleId}");
                await OnInitializedAsync();
            }
        }
    }
}